name: Build and test ecli on aarch64

on:
  push:
    branches: ["*"]
    paths:
      - "ecli/**"
      - "compiler/**"  # Ensure ecc and ecli releasing at same time
      - "wasm-rumtime/**"  # Release when dependencies updated
      - "third_party/**"
      - "bpf-loader-rs/**"
      - "eunomia-sdk/**"
      - ".github/**"

  pull_request:
    branches: ["*"]
    paths:
      - "ecli/**"
      - "compiler/**"
      - "wasm-rumtime/**"
      - "third_party/**"
      - "bpf-loader-rs/**"
      - "eunomia-sdk/**"
      - ".github/**"
env:
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local

jobs:
  build-full-client:
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Install dependencies for cross-building
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
    - name: Clone libbpf for building
      run: |
        git clone https://github.com/libbpf/libbpf

    - name: Build libbpf in a qemu virtual machine, and copy libs out
      uses: uraimo/run-on-arch-action@v2
      with: 
        arch: aarch64
        distro: ubuntu22.04
        run: |
          apt-get update
          apt-get install -y zlib1g-dev libelf-dev gcc make pkg-config
          cd /libbpf/src
          make
          cp libbpf.so /libs
          cp /usr/lib/aarch64-linux-gnu/libelf.so /libs
          cp /usr/lib/aarch64-linux-gnu/libz.so /libs
        dockerRunArgs: |
          --volume "${PWD}/libbpf:/libbpf"
          --volume "${PWD}/libs:/libs"


    - name: cache dependencies
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
        key: ${{ runner.os }}-dependencies

    - name: cache rust
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          compiler/cmd
          ecli
          wasm-runtime/runtime/rust
          eunomia-sdks/eunomia-rs
    - name: Prepare cargo-appimage
      uses: eunomia-bpf/prepare-cargo-appimage@v5
    - name: Install libfuse
      run: |
        sudo apt-get install -y libfuse2
    - name: Build full client
      run:  |
        cd ecli/client
        CARGO_APPIMAGE_TOOL_BIN=../../appimagetool CARGO_APPIMAGE_RUNTIME_FILE=../../runtime CARGO_APPIMAGE_OUT_FILE=ecli cargo appimage
    
    - name: test ecli
      run: |
        cd ecli/ecli-lib
        # Install rustup manually using user root
        curl https://sh.rustup.rs -o rustup.sh
        sudo bash -c "cat rustup.sh | sh -s -- -y ; /root/.cargo/bin/cargo test -- --skip test_pause_and_resume"
    - name: Package ecli
      run: |
        mkdir -p release
        cp ecli/client/ecli release/ecli
        cd release
        tar -czvf ecli-${{ matrix.target }}-${{ needs.create-release-version.outputs.version }}.tar.gz ecli
    - name: Test CLI
      run: |
        mkdir cli-test
        cd cli-test
        cp ../.github/assets/package.json .
        ../release/ecli -h
        sudo timeout -s 2 3 ../release/ecli run ./package.json || if [ $? = 124 ]; then exit 0; else exit $?; fi
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: "ecli-full-${{needs.create-release-version.outputs.version}}"
        path: |
          release/ecli-${{ matrix.target }}-${{ needs.create-release-version.outputs.version }}.tar.gz
          release/ecli
  build-ecli-server:
    needs: create-release-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Prepare cargo-appimage
        uses: eunomia-bpf/prepare-cargo-appimage@v5
      - name: Install libfuse
        run: |
          sudo apt-get install -y libfuse2
      - name: Build ecli-server
        run: |
          sudo make install-deps
          cd ecli/server
          CARGO_APPIMAGE_TOOL_BIN=../../appimagetool CARGO_APPIMAGE_RUNTIME_FILE=../../runtime CARGO_APPIMAGE_OUT_FILE=ecli-server cargo appimage
      - name: Package ecli-server
        run: |
          cp ecli/server/ecli-server .
          tar -czvf ecli-server.tar.gz ecli-server 
      - name: Test CLI
        run: |
          mkdir cli-test
          cd cli-test
          ../ecli-server -h
          sudo timeout -s 2 3 ../ecli-server || if [ $? = 124 ]; then exit 0; else exit $?; fi
      - name: Rename `ecli-server.tar.gz` to proper name
        id: name
        run: |
          mv ecli-server.tar.gz ecli-server-ubuntu-latest.tar.gz
          echo "zip_name=ecli-server-ubuntu-latest.tar.gz" >> "$GITHUB_OUTPUT"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with: 
          name: "ecli-server-${{needs.create-release-version.outputs.version}}"
          path: |
            ${{steps.name.outputs.zip_name}}
          
  # publish-release:
  #   runs-on: ubuntu-latest
  #   needs: [create-release-version, build-full-client, build-http-only-client, build-native-only-client, build-ecli-server]
  #   steps:
  #     - name: Download build results
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: results
  #     - name: List files to release
  #       id: list-files
  #       run: |
  #         EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
  #         FILES=`find ./results -type f`
  #         echo "$FILES"
  #         echo "upload_files<<$EOF" >> "$GITHUB_OUTPUT"
  #         echo "$FILES" >> "$GITHUB_OUTPUT"
  #         echo "$EOF" >> "$GITHUB_OUTPUT"
  #     - name: Publish
  #       if:   github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'eunomia-bpf'
  #       uses: softprops/action-gh-release@v1
  #       with:
  #           files: ${{steps.list-files.outputs.upload_files}}
  #           prerelease: false
  #           tag_name: ${{ needs.create-release-version.outputs.version }}
  #           generate_release_notes: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
