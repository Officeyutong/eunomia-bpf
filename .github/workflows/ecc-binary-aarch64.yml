name: Build and release binary of ecc (aarch64)

on:
  push:
    branches: "master"
env:
  GITHUB_REPO_OWNER: ${{ github.repository_owner }}
jobs:
  # define job to build and publish docker image
  build-and-release:
    runs-on: ubuntu-latest
    # run only when code is compiling and tests are passing
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install dependencies for cross building
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          ls /usr/lib/gcc-cross/aarch64-linux-gnu/
          aarch64-linux-gnu-gcc --version
      - name: Prepare bpftool and vmlinux repo for building workspace
        # Move more steps outside of the virtual machine
        run: |
          mkdir workspace
          mkdir assets
          cd assets
          git clone --recursive https://github.com/eunomia-bpf/vmlinux
          cd vmlinux
          git checkout 933f83b
          # Avoid symlink issues
          rm vmlinux.h
          cd ..
          git clone --recursive https://github.com/eunomia-bpf/bpftool
          cd bpftool
          git checkout 0594034
      - name: Build workspace in aarch64 virtual machine
        uses: uraimo/run-on-arch-action@v2
        with: 
          arch: aarch64
          distro: ubuntu22.04
          run: |
            apt-get update
            apt-get install -y zlib1g-dev libelf-dev gcc make
            cd /workspace && mkdir bin
            cd /assets/bpftool/src
            CFLAGS="-static" make
            cp bpftool /workspace/bin
          dockerRunArgs: |
            --volume "${PWD}/workspace:/workspace"
            --volume "${PWD}/assets:/assets"
      - name: Compose the ecc workspace
        run: |
          sudo chmod 777 workspace -R
          sudo chown `whoami` workspace -R
          cd workspace
          mkdir include
          cp -r ../assets/bpftool/src/libbpf/include/bpf include/
          cp -r ../assets/vmlinux/ include/
          cp ./include/vmlinux/arm64/vmlinux.h ./include/vmlinux
      - name: Cross build ecc (aarch64)
        run: |
          rustup target add aarch64-unknown-linux-gnu
          export ECC_CUSTOM_WORKSPACE_ROOT=$(pwd)/workspace
          echo "Workspace dir: $ECC_CUSTOM_WORKSPACE_ROOT"
          cd compiler/cmd
          cargo build --release --target aarch64-unknown-linux-gnu
          cd ../..
          mkdir data
          cp ./compiler/cmd/target/aarch64-unknown-linux-gnu/release/ecc-rs data/ecc
          cp ./.github/scripts/copy-ecc-aarch64-libs.sh ./data
          ls -lah data
      # Necessary if we want to run things cross platform
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Run ecc-rs and retrive what libraries it loaded
        uses: uraimo/run-on-arch-action@v2
        with: 
          arch: aarch64
          distro: ubuntu22.04
          run: |
            apt-get update
            apt-get install -y libclang1
            echo "Installation done"
            echo "Working directory $(pwd)"
            chmod +x /data/ecc
            echo "Permission set done"
            chmod +x /data/copy-ecc-aarch64-libs.sh
            /data/copy-ecc-aarch64-libs.sh
          dockerRunArgs: |
            --volume "${PWD}/data:/data"
          shell: /bin/bash
      - name: Show what libraries were copied
        run: |
          sudo chmod 777 ./data -R
          sudo chown $(whoami) ./data -R
          find ./data/libs -type f
      - name: Prepare runtime file and cargo-appimage tool
        uses: eunomia-bpf/prepare-cargo-appimage@v6
        with: 
          runtime-url: https://github.com/eunomia-bpf/prepare-cargo-appimage/raw/v6/runtime-aarch64
      - name: Install libfuse for appimagetool
        run: |
          sudo apt-get update
          sudo apt-get install libfuse3
      - name: Clone and install cargo-appimage with aarch64 launcher
        run: |
          git clone https://github.com/eunomia-bpf/cargo-appimage
          cd cargo-appimage
          RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --target aarch64-unknown-linux-gnu
      - name: Compose files and pack them
        run: |
          mkdir appimage-root
          cd appimage-root
          cp -r ../data/libs/* .
          mkdir -p usr/bin
          cp ../data/ecc usr/bin/bin
          touch icon.png
          cp ../cargo-appimage/target/aarch64-unknown-linux-gnu/release/cargo-appimage-runner AppRun
          cp ../.github/scripts/cargo-appimage.desktop .
          ../appimagetool --runtime-file ../runtime . ../ecc-aarch64
      - uses: actions/upload-artifact@v3
        name: Upload build result
        with:
          name: ecc-aarch64
          path: ecc-aarch64
